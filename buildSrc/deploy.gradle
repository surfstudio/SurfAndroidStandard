import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.GradleProperties
import ru.surfstudio.android.build.artifactory.Artifactory
import ru.surfstudio.android.build.artifactory.ArtifactoryConfig
import ru.surfstudio.android.build.Initializator

apply from: "$rootDir/buildSrc/config.gradle"
apply plugin: 'maven'

String currentBuildDirectory = gradle.startParameter.currentDir.path
Initializator.init(currentBuildDirectory)

// Function for configuration of dependencies of current android-standard module.
// Context of current module is passed in parameters.

def trueValue = "true"

// license data for maven pom
def licenseName = "The Apache License, Version 2.0"
def licenseUrl = "http://www.apache.org/licenses/LICENSE-2.0"

// scm data for maven pom
def scmConnection = "scm:git:git@github.com:surfstudio/SurfAndroidStandard.git"
def scmDeveloperConnection = "scm:git:ssh://github.com:surfstudio/SurfAndroidStandard.git"
def scmUrl = "https://github.com/surfstudio/SurfAndroidStandard"

// developer data for maven pom
def developerName = "SurfStudio"
def developerMail = "mail@surfstudio.ru"
def developerOrganization = "Surf Studio LLC"
def developerOrganizationUrl = "https://surfstudio.ru"

ext.configureDeploy = { context ->
    // define function for deploy of current module to artifactory
    context.afterEvaluate {

        // add java source to artifacts for release in JCenter !!! REQUIRED
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        artifacts {
            archives sourcesJar
        }

        def artifactName = Components.getArtifactName(project.name)
        def artifactDescription = Components.getArtifactDescription(project.name)
        def artifactUrl = Components.getArtifactUrl(project.name)

        if (!artifactName.trim()) {
            throw new GradleException("artifactName for ${project.name} can not be blank for deploy")
        }

        uploadArchives {
            // WARNING! It is normal for uploadArchives to be called during configuration of modules
            // without actual deploy. But if the task contains additional logic which throws exception,
            // the task will fail during any other gradle task.
            // To avoid this, add doFirst, so uploadArchives will not be called during configuration of modules.
            // See http://bit.ly/39vFtMj and http://bit.ly/3avuzq0
            doFirst {
                // If -Pcomponent set, deploy only its artifacts
                if (project.hasProperty(GradleProperties.COMPONENT)) {
                    def componentName = project.property(GradleProperties.COMPONENT)
                    if (!Components.isLibraryFromComponent(project.name, componentName)) return
                }

                // If -PonlyUnstable=true deploy only unstable artifacts
                if (project.hasProperty(GradleProperties.DEPLOY_ONLY_UNSTABLE_COMPONENTS)) {
                    if (project.property(GradleProperties.DEPLOY_ONLY_UNSTABLE_COMPONENTS) == trueValue
                            && Components.getComponentStability(project.name)
                    ) return
                }

                // If -PdeployOnlyIfNotExist=true deploy only artifacts that don't exist in artifactory
                if (project.hasProperty(GradleProperties.DEPLOY_ONLY_IF_NOT_EXIST)) {
                    if (project.property(GradleProperties.DEPLOY_ONLY_IF_NOT_EXIST) == trueValue
                            && Artifactory.isLibraryAlreadyDeployed(project.name)
                    ) return
                }

                repositories.mavenDeployer {
                    repository(url: ArtifactoryConfig.DEPLOY_URL) {
                        authentication(
                                userName: ArtifactoryConfig.USER_NAME,
                                password: ArtifactoryConfig.PASSWORD
                        )
                    }

                    def artifactGroupId = ArtifactoryConfig.ANDROID_STANDARD_GROUP_ID
                    def artifactVersion = Components.getModuleVersion(project.name)
                    println "uploadAcrhives $artifactName $artifactVersion"

                    pom.groupId = artifactGroupId
                    pom.artifactId = artifactName
                    pom.version = artifactVersion

                    pom.project {
                        name artifactName
                        description artifactDescription
                        url artifactUrl

                        licenses {
                            license {
                                name licenseName
                                url licenseUrl
                            }
                        }

                        scm {
                            connection scmConnection
                            developerConnection scmDeveloperConnection
                            url scmUrl
                        }

                        developers {
                            developer {
                                name developerName
                                email developerMail
                                organization developerOrganization
                                organizationUrl developerOrganizationUrl
                            }
                        }

                        dependencies {
                            Components.getAndroidStandardDependencies(project.name).each {
                                def depArtifactName = it.getArtifactName()
                                def depArtifactVersion = Components.getModuleVersion(it.getName())
                                dependency {
                                    groupId artifactGroupId
                                    artifactId depArtifactName
                                    version depArtifactVersion
                                    scope "compile"
                                }
                            }
                        }
                    }
                    //This code deletes "implementation project("...") dependencies from pom file"
                    pom.whenConfigured {
                        p ->
                            p.dependencies = p.dependencies.findAll {
                                dep -> dep.groupId != rootDir.name
                            }
                    }
                } // repositories.mavenDeployer
            }
        } // uploadArchives

        task distributeArtifactsToBintray {
            // WARNING! This is very important to use doFirst here
            // in order to avoid calling this task during configuration of modules.
            // uploadArchives could be called during configuration with no errors
            // and without actual deploy, but we need to add doFirst for custom tasks,
            // because the custom task also deploys during configuration, which is incorrect
            // See http://bit.ly/39vFtMj and http://bit.ly/3avuzq0
            doFirst {
                // If -Pcomponent set, deploy only its artifacts
                if (project.hasProperty(GradleProperties.COMPONENT)) {
                    def componentName = project.property(GradleProperties.COMPONENT)
                    if (!Components.isLibraryFromComponent(project.name, componentName)) return
                }

                def overrideExisted = false
                // Read -PoverrideExisted property
                if (project.hasProperty(GradleProperties.OVERRIDE_EXISTED)) {
                    overrideExisted = project.property(GradleProperties.OVERRIDE_EXISTED) == trueValue
                }

                Artifactory.distributeArtifactToBintray(overrideExisted, artifactName)
            }
        } // distributeArtifactsToBintray
    }
}
import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.GradleProperties
import ru.surfstudio.android.build.artifactory.ArtifactoryConfig
import ru.surfstudio.android.build.Initializator
import ru.surfstudio.android.build.PublishType
import ru.surfstudio.android.build.PublishUtil
import ru.surfstudio.android.build.publish.PublishConfig

apply from: "$rootDir/buildSrc/config.gradle"
apply plugin: 'maven-publish'
apply plugin: 'signing'

String currentBuildDirectory = gradle.startParameter.currentDir.path
Initializator.init(currentBuildDirectory)

// Function for configuration of dependencies of current android-standard module.
// Context of current module is passed in parameters.

ext["signing.keyId"] = System.getenv("surf_maven_sign_key_id")
ext["signing.password"] = System.getenv("surf_maven_sign_password")
ext["signing.secretKeyRingFile"] = "$rootDir/sign/sign.gpg"

ext.checkAndDisableTask = { task, publishType ->
    if (project.hasProperty(GradleProperties.COMPONENT)) {
        def componentName = project.property(GradleProperties.COMPONENT)
        if (!Components.isLibraryFromComponent(project.name, componentName)) {
            task.enabled = false
            task.group = null
        }
    }
}

ext.configureDeploy = { context ->
    // define function for deploy of current module to artifactory or maven central
    context.afterEvaluate {

        // add java source to artifacts
        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
        }

        def artifactName = Components.getArtifactName(project.name)
        def artifactGroupId = ArtifactoryConfig.ANDROID_STANDARD_GROUP_ID
        def artifactVersion = Components.getModuleVersion(project.name)
        def artifactDescription = Components.getArtifactDescription(project.name)
        def artifactUrl = Components.getArtifactUrl(project.name)
        def publishData = PublishUtil.initPublishData()
        def publishTypeProperty = ""
        def publishType = PublishType.UNKNOWN

        if (!artifactName.trim()) {
            throw new GradleException("artifactName for ${project.name} can not be blank for deploy")
        }
        if (project.hasProperty(GradleProperties.PUBLISH_TYPE)) {
            publishTypeProperty = project.property(GradleProperties.PUBLISH_TYPE)
            publishType = PublishType.getById(publishTypeProperty)
        }

        signing {
            sign publishing.publications
        }

        publishing {
            publications {
                mavenRelease(MavenPublication) {
                    // check publishType
                    if (project.hasProperty(GradleProperties.PUBLISH_TYPE)) {
                        if (publishType == PublishType.UNKNOWN) {
                            throw new GradleException("Illegal publishType set: $publishTypeProperty")
                        }
                        publishData = PublishUtil.getPublishData(publishType)
                    }

                    groupId = artifactGroupId
                    artifactId = artifactName
                    version = artifactVersion

                    from components.release

                    pom {
                        name = artifactName
                        description = artifactDescription
                        url = artifactUrl

                        organization {
                            name = PublishConfig.DEVELOPER_ORGANISATION
                            url = PublishConfig.DEVELOPER_ORGANISATION_URL
                        }

                        issueManagement {
                            system = PublishConfig.ISSUE_MANAGEMENT_SYSTEM
                            url = PublishConfig.ISSUE_MANAGEMENT_URL
                        }

                        licenses {
                            license {
                                name = PublishConfig.LICENSE_NAME
                                url = PublishConfig.LICENSE_URL
                            }
                        }

                        scm {
                            connection = PublishConfig.SCM_CONNECTION
                            developerConnection = PublishConfig.SCM_DEVELOPER_CONNECTION
                            url = PublishConfig.SCM_URL
                        }

                        developers {
                            developer {
                                name = PublishConfig.DEVELOPER_NAME
                                email = PublishConfig.DEVELOPER_MAIL
                            }
                        }
                    }   // pom

                    artifact sourcesJar {
                        classifier = "sources"
                    }
                }   // mavenRelease
            }   // publications

            repositories {
                maven {
                    name = PublishConfig.REPOSITORY_NAME
                    url = publishData.url
                    credentials {
                        username System.getenv(publishData.userNameEnvName)
                        password System.getenv(publishData.passwordEnvName)
                    }
                }   // maven
            } // repositories
        } // publishing

        tasks.withType(PublishToMavenRepository) {
            doFirst {
                println("Publishing ${publication.groupId}:${publication.artifactId}:${publication.version} to ${repository.url}")
            }
        }

        // If -Pcomponent set, deploy and sign only its artifacts.
        // WARNING: if -Pcomponent set for -PpublishType=maven_release, use --no-parallel option
        // in order to avoid possible bugs with deploy to different staging repositories
        afterEvaluate {
            tasks.withType(Sign) { task ->
                checkAndDisableTask(task, publishType)
            }
            tasks.withType(PublishToMavenRepository) { task ->
                checkAndDisableTask(task, publishType)
            }
        }
    }
}